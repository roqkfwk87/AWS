강력한 오픈 소스 빌드 자동화 시스템으로, 
Java뿐만 아니라 다양한 프로그래밍 언어와 프로젝트에 사용
Groovy나 Kotlin을 기반으로 한 DSL(Domain-Specific Language)을 사용하여 프로젝트의 빌드 스크립트를 작성
Gradle은 Maven과 Ant의 장점을 결합하고, 성능 면에서도 개선을 제공하여 많은 인기
Gradle은 그 유연성과 성능으로 인해 많은 개발자와 기업에게 선택되고 있으며, 
지속적으로 발전하고 있는 빌드 자동화 도구 

주요 특징

1. 성능: 
Gradle은 증분 빌드와 캐싱을 통해 빌드 시간을 크게 단축
이미 수행된 작업은 다시 실행하지 않고, 결과를 캐싱하여 필요할 때 재사용

2. 유연성: 
Gradle의 DSL을 통해 빌드 스크립트를 간결하게 작성할 수 있으며, 복잡한 빌드 로직도 쉽게 구현

3. 다양한 언어와 플랫폼 지원: 
Java, Kotlin, Scala, Groovy 등 다양한 언어는 물론, 
Android, C/C++, Python 프로젝트 등 여러 플랫폼에 걸쳐 넓은 지원을 제공합니다.

4. 강력한 종속성 관리: 
Gradle은 Maven 중앙 저장소를 비롯하여 다양한 저장소의 라이브러리를 사용할 수 있으며, 
종속성 관리도 효율적으로 수행합니다.

5. 풍부한 플러그인 생태계: 
많은 내장 플러그인과 커뮤니티에서 제공하는 플러그인을 통해 빌드 과정을 확장하고 자동화

주요 사용 사례

- 멀티 프로젝트 빌드: 
대규모 프로젝트의 경우, 여러 하위 프로젝트를 하나의 빌드 과정에서 관리하고 빌드할 수 있습니다.

- 애플리케이션 배포: 
애플리케이션을 빌드하고 테스트한 후, 다양한 환경에 배포하는 과정을 자동화

- Android 애플리케이션 개발: 
Android Studio와 함께 Gradle은 Android 애플리케이션 개발의 공식 빌드 시스템
매니페스트 병합, 코드 축소, 리소스 처리 등 Android 개발에 필요한 다양한 작업을 지원

사용 방법

1. Gradle 설치: 
공식 웹사이트에서 Gradle을 다운로드하고 설치 
혹은 Gradle Wrapper를 사용하여 프로젝트별로 Gradle 버전을 관리

2. 빌드 스크립트 작성: 
`build.gradle` 또는 `build.gradle.kts` 파일에 프로젝트의 빌드 과정을 정의
이 파일에서는 사용할 플러그인, 프로젝트 종속성, 빌드 작업 등을 설정

3. Gradle 명령어 실행: 
터미널이나 커맨드 라인에서 `gradle build`, `gradle test` 등의 명령어를 실행하여 빌드, 테스트, 배포 등의 작업을 수행
