- Java 프로젝트의 빌드 과정을 자동화하기 위한 도구
- 프로젝트 객체 모델(Project Object Model, POM)을 기반으로 하며, XML 파일(pom.xml)을 사용하여 
프로젝트의 구조, 의존성, 플러그인, 목표 등을 정의
- Maven은 Java 개발자에게 강력한 도구를 제공하여, 빌드 과정의 자동화와 관리를 용이
- 이를 통해 개발자는 빌드 및 배포 과정에 드는 시간과 노력을 줄이고, 소프트웨어 개발에 더 집중할 수 있음 

주요 기능
1. 종속성 관리: 
Maven은 중앙 저장소에서 자동으로 라이브러리와 플러그인을 다운로드하고, 
프로젝트에 필요한 종속성을 관리합니다. 이는`pom.xml`파일에 명시된 대로 수행됨

2. 프로젝트 라이프사이클 관리: 
Maven은 정의된 라이프사이클을 따라 빌드 과정을 자동화
주요 라이프사이클에는 `clean`, `validate`, `compile`, `test`, `package`, `verify`, `install`, `deploy` 등

3. 프로젝트 템플릿(Archetype): 
Maven Archetype을 사용하여 새 프로젝트를 쉽게 시작할 수 있음
이는 프로젝트의 기본 구조와 필요한 설정 파일을 자동으로 생성

4. 프로젝트 정보 및 보고: 
Maven은 프로젝트 정보(개발자 목록, 종속성 목록 등)와 
다양한 보고서(테스트 보고서, 코드 분석 보고서 등)를 생성할 수 있습니다.

장점

- 표준화된 빌드 프로세스: 
Maven을 사용하면 프로젝트의 빌드 과정이 표준화되어, 
새로운 개발자가 프로젝트에 참여할 때 학습 곡선을 낮출 수 있음

- 종속성 관리의 용이성: 
필요한 라이브러리와 그 종속성을 쉽게 관리하고 자동으로 업데이트할 수 있음

- 프로젝트 정보와 보고서 자동 생성: 
프로젝트 관련 정보와 다양한 보고서를 자동으로 생성하여 프로젝트 관리를 용이

- 다양한 플러그인과 도구의 지원:
Maven은 다양한 플러그인과 도구를 지원하여 빌드, 테스트, 배포 등 다양한 작업을 자동화

사용 방법

1. Maven 설치: 
Maven을 사용하기 위해서는 Java JDK와 Maven을 설치

2. `pom.xml` 파일 생성: 
프로젝트의 루트 디렉토리에 `pom.xml` 파일을 생성하고,
프로젝트에 필요한 설정(프로젝트 정보, 종속성, 플러그인 등)을 정의

3. Maven 명령어 실행: 
커맨드 라인에서 Maven 라이프사이클 명령어(예: `mvn compile`, `mvn package`)를 실행하여 프로젝트를 빌드하고 관리