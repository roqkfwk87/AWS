spring init
    -> application.properties (server.port 변경)
    -> controller 생성 (@RestController, @RequestMapping)
    -> 각 HTTP 요청에 따른 method 생성 (@Get, Post, Put, Patch, DeleteMapping)
        --> 브라우저의 스크립트로 요청이 넘어왔을 때 같은 출처가 아니라면 CORS 정책으로 막힘 
        --> CorsConfig 클래스를 생성하여 Cors 정책 변경 (@CorsConfiguration, WebMvcConfigurer)
        --> CorsRegistry 객체를 설정 (addMapping : URL 패턴 지정, allowedMethods : HTTP method 지정, allowedOrigins : 출처 지정)
    -> 각 HTTP 요청에 데이터를 받음 (@ReuestParam. @PathVariable, @RequestBody)
    -> 데이터를 받을 때 필수 체크 @ReuestParam. @PathVariable (required 속성 사용)
    -> RequestBody는 validation 라이브러리를 활용 (build.gradle 의존성 추가)
    -> RequestBody의 JSON 데이터를 DTO로 받음
    -> RequestBody에서 유효성 검사 어노테이션으로 각 속성마다 검사 (@NotNull, @NotBlank ...)
    -> validation을 사용해서 유효성 검사 시에 유효하지 않으면 String boot가 자동으로 response body를 생성해서 응답 
        --> ExceptionHandler 클래스로 validation 관련 예외 직접 처리 (@RestControllerAdvice, @ExceptionHandler)
    -> 각 HTTP 응답을 직접 제어하기 위해 responseEntity 클래스를 사용 (status code, body, header ... 제어)

// https://spring.io/projects/spring-boot (스프링 부트 참고)

studentNumber, address - 클라이언트로부터 받아옴 


get, body -> Request를 쓸수 없기 때문에 받아옴 

이 데이터가 돌아가는 방법을 알아야 함 
UPDATE student;
SET address = dto.address;
WhERE student_number = dto.studentNumber;

1. student 테이블로 접근
2. dto.studentNumber에 해당하는 레코드를 검색
3. 검색된 레코드의 address 값을 dto.address로 변경 

----- 객체지향프로그래밍언어의 클래스 == RDBMS의 테이블 -----
----- 객체지향프로그래밍언어의 인스턴스 == RDBMS의 레코드 -----

1. student 클래스로 접근
2. dto.studentNumber에 해당하는 인스턴스를 검색
3. 검색된 인스턴스의 address 값을 dto.address로 변경 

CRUD
CREATE : 1 ~ 2 READ 
READ : 엄청 많음 
UPDATE : 1 ~ 컬럼 개수
DELETE : 1 ~ 2 

findByAge 
findStudentNumber

// WebMvcConfigurer.java

GET - http://localhost:4000/auth/phone => 토큰 확인
POST - http://localhost:4000/validation => body / raw / 토큰 입력 / phone 나오는지 확인
GET - http://localhost:4000/main/ => authorization / barer token / 토큰 입력 => spring boot!!
GET - http://localhost:4000/student/ => authorization / barer token / 토큰 입력 => 403

GET - http://localhost:4000/auth/phone => 토큰 확인
POST - http://localhost:4000/validation => body / raw / 토큰 입력 / phone 나오는지 확인
GET - http://localhost:4000/main/ => authorization / barer token / 토큰 입력 => spring boot!!
GET - http://localhost:4000/student/ => authorization / barer token / 토큰 입력 => 403
GET - http://localhost:4000/auth/phone => authorization / barer token / 토큰 입력 => 다른 토큰 값 출력
POST - http://localhost:4000/validation => body / raw / 토큰 입력 => 403

// JwtAuthenticationFilter.java

GET http://localhost:4000/auth/qwer
eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJxd2VyIiwiaWF0IjoxNzEzMTY5ODU2LCJleHAiOjE3MTMxODQyNTZ9.hWqnBnzMLoctf0ZnY7yI8repBu4kB2tWM6YGMGF_5Lw
Bearer Token -> 토큰 얻기

DELETE http://localhost:4000/student/1
No auth -> 403

http://localhost:4000/auth/student
eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHVkZW50IiwiaWF0IjoxNzEzMTY5OTQ1LCJleHAiOjE3MTMxODQzNDV9.8iH2n1CT2YOyqAT8mywsIimjN483TbF720gkdE-tzzg

DELETE http://localhost:4000/student/1




