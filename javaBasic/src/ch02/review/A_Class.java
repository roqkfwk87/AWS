package ch02.review;

// Class : 공통 성질을 가진 대상들의 정의
class ExampleClass {
	
	// 속성(필드, 변수) : 해당 클래스의 객체(인스턴스)가 가질 수 있는 정보나 상태 
	// 유형 
	// 인스턴스 변수 : 각 인스턴스가 독립적으로 가질수 있는 속성 
	// 특징 : 반드시 인스턴스가 생성된 후에 인스턴스로 사용할 수 있음
	int instanceVariable; // 데이터타입 인스턴스 변수;
	// 클래스 변수 : 같은 클래스로 생성된 인스턴스가 공유하는 속성 
	// static 키워드를 사용하여 선언
	// 특징 : 클래스로 직접 사용할 수 있고 인스턴스에서도 사용할 수 있음 
	static int staticVariable; // static 데이터타입 스테틱변수 
	
	// 기능(메서드) : 해당 클래스가 수행할 수 있는 작업이나 행동 
	// 반환타입 메서드명 (매개변수) { 메서드가 수행할 작업 }
	
	// 유형
	// 인스턴스 메서드 : 각 인스턴스가 독립적으로 수행하는 기능 
	// 특징 : 인스턴스가 생성된 후에 사용할 수 있음 
	// 		일반적으로 인스턴스 변수를 사용하는 기능을 구현할 때 사용 
	void instanceMethod() {
		
	}
	
	// 클래스 메서드 : 같은 클래스로 생성된 인스턴스가 공유하는 기능 
	// static 키워드 사용하여 선언 
	// 특징 : 인스턴스 변수를 사용할 수 없음 / 일반적으로 인스턴스 변수를 사용하지 않는 기능을 구현할 때 사용
	//		클래스로 직접 사용할 수 있고 인스턴스로도 사용할 수 있음 
	static void staticMethod() {
	
		
		
		
	}
}





public class A_Class {

	public static void main(String[] args) {
		

	}

}

// 변수는 명사로 사용됨 
// 클래스 메서드는 인스턴스 변수를 사용할 수 없다라는 특징의 이유
// 클래스 메서드는 인스턴스 생성 없이 호출이 가능하므로 클래스 메서드가 호출되었을 때, 인스턴스가 존재하지 않을 수도 있기 때문
// 인스턴스와 관계없는 (인스턴스 변수나 인스턴스 메서드를 사용하지 않는)메서드를 클래스 메서드라고 함
// 인스턴스 변수나 인스턴스 메서드는 static이 붙은 멤버들을 사용하는 것은 언제나 가능 
// 왜 static 메소드는 인스턴스 멤버(인스턴스 변수, 인스턴스 메소드)를 사용할 수 없는가?
//-> 인스턴스 메소드를 이용하려면 인스턴스 변수를 사용하므로 객체 생성이 필요하다.
//그러나 static 메소드는 항상 호출이 가능해야하는데, 객체가 있을지 없을지 모르기 때문이다.
// static 메소드끼리, 인스턴스 메소드끼리는 호출이 가능하다.







