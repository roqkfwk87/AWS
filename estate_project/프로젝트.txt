* 요구사항 *

1. 사용자 아이디 비밀번호 입력
2. 로그인 요청을 서버로 보냄

3. 서버는 아이디와 비밀번호가 필수로 입력되었는지 확인
4. 아이디를 가지고 데이터베이스에서 검색 
5. 검색 결과가 존재하지 않으면 '로그인 정보 불일치'로 응답 
6. 검색 결과가 존재하면 해당 유저 엔터티의 암호화된 패스워드와 사용자가 입력한 패스워드를 비교 
7. 패스워드가 불일치하면 '로그인 정보 불일치'로 응답 
8. 일치한다면 아이디로 jwt를 생성하여 만료기간과 함께 반환 

// 정상적으로 처리되지 않은 경우 
1. 데이터베이스 에러 
2. 백엔드 서버 에러 
3. 필수 데이터 미입력 
4. 토큰 생성 에러 

// 
1. 사용자가 아이디 입력
2. 중복확인 요청 보냄 

3. 서버는 아이디가 필수로 입력되었는지 확인
4. 해당 아이디를 가지고 있는 유저가 있는지 데이터베이스에서 검색 
5. 만약 존재하는 아이디라면 '존재하는 아이디'응답 처리
6. 존재하지 않는 아이디라면 '성공' 응답 처리

1. 사용자가 이메일을 입력
2. 이메일 인증 요청을 보냄

3. 서버는 이메일 필수로 입력되었는지와 이메일 형식이 맞는지를 확인
4. 입력한 이메일이 데이터베이스의 유저테이블에 존재하는지 확인
5. 존재하는 이메일이라면 '중복된 이메일' 응답 처리
6. 4자리의 인증번호를 생성 
7. 생성된 인증번호를 사용자가 입력한 이메일로 전송 
8. 전송이 성공적으로 이루어졌다면 해당 이메일과 인증번호를 데이터베이스에 저장하고 전송이 실패하면 '메일 전송 실패' 응답 처리
9. 저장이 성공적으로 이루어졌다면 '성공' 응답 처리 


---------------------------------------------------------------------------------------------------------------------

* DDL *
게시물 (게시물 번호, 제목, 내용, ...)
댓글 (댓글번호, 작성자, 내용, 작성일, 게시물번호, 부모댓글번호)

[1, 제목1, 내용1]
[2, 제목2, 내용2]

[1, 존, 댓글1, 2024-04-19, 1, null]
[2, 마이클, 댓글1-1, 2024-04-19, 1, 1]
[3, 피터, 댓글2, 2024-04-19, 1, null]
[4, 존, 댓글1-1-1, 2024-04-19, 1, 2]
[5, 피터, 댓글1-2, 2024-04-19, 1, 1]


*중요*

-- 아이디(sign-in)
- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

// method에 처음 들어오면 사용자가 입력을 보냈을 때 입력받은 데이터의 유효성 검사를 먼저해야 함
1. request body의 데이터가 유효한 데이터인지 확인 
// 유효한지에 대한 여부성을 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리 

// 유효한 데이터 
(userId)

2. 데이터베이스의 user 테이블에서 해당하는 userId를 가지고 있는 유저가 있는지 확인 
// userId가 똑같은게 있는지 없는지만 확인하면 됨 (true or false => boolean)
// 중복이 존재하는 경우 
2.1 만약 가지고 있는 유저가 존재하면 'DI' 응답 처리
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

// 중복이 존재하지 않는 경우 
3. 'SU' 응답 처리

-- 추가적인 데이터는 필요X / code, message만 보내주면 됨 

/*
-- 아이디, 비밀번호 

- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터에 대해서 유효성 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리 

(userId, userPassword)

2. 데이터베이스의 user 테이블에서 userId에 해당하는 유저 레코드 조회 
select * from user where userId = :userId and userPassword = :userPassword
*/

-- 이메일 (sign-up)
- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터에 대해서 유효성 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리 

(userEmail)

2. 데이터베이스의 user 테이블에서 해당하는 userEmail를 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DE' 응답 처리
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

3. 4자리의 인증 번호를 생성 

4. email_auth_number 테이블에 userEmail과 생성한 4자리의 인증 번호를 저장 
4.1 만약 데이터베이스 작업 중 에러가 발생하면 'DEB' 응답 처리 

5. userEmail에 생성한 4자리의 인증 번호를 전송 
5.1 만약 이메일 전송 중에 에러가 발생하면 데이터베이스의 email_auth_number 테이블에 저장한 데이터를 삭제 
5.2 만약 이메일 전송 중에 에러가 발생하면 'MF' 응답 처리

6. 'SU' 응답 처리

-- 이메일 확인

- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터에 대해서 유효성 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리 

(userEmail, authNumber)

2. 데이터베이스의 email_auth_number 테이블에서 해당하는 userEmail과 authNumber를 모두 가지고 있는 데이터가 있는지 확인
2.1 해당하는 데이터가 없다면 'AF' 응답 처리 
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

3. 'SU' 응답 처리

-- 회원가입

- 클라이언트로부터 요청 (request body에 데이터가 포함되어 있음)

1. request body의 데이터에 대해서 유효성 확인
1.1 만약 유효하지 않은 데이터이면 'VF' 응답 처리 

(userId, userPassword, userEmail, authNumber)

2. 데이터베이스의 user 테이블에서 해당하는 userId를 가지고 있는 유저가 있는지 확인
2.1 만약 가지고 있는 유저가 존재하면 'DI' 응답 처리
2.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

3. 데이터베이스의 user 테이블에서 해당하는 userEmail를 가지고 있는 유저가 있는지 확인
3.1 만약 가지고 있는 유저가 존재하면 'DE' 응답 처리
3.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

4. 데이터베이스의 email_auth_number 테이블에서 해당하는 userEmail과 authNumber를 모두 가지고 있는 데이터가 있는지 확인
4.1 해당하는 데이터가 없다면 'AF' 응답 처리 
4.2 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

5. 사용자로부터 입력받은 userPassword를 암호화

6. 사용자로부터 입력받은 userId, userEmail과 암호화한 password, 지정된 권한, 가입경로를 사용하여 데이터베이스의 user 테이블에 레코드를 삽입 
6.1 만약 데이터베이스 작업 중 에러가 발생하면 'DBE' 응답 처리 

7. 'SU' 응답 처리 

------------------------------------------

SELECT * 
FROM user
WHERE userId = :userId;

// AuthServiceImplimentation 적어줌
// ID를 가져오기
findByUserId;
existsByUserId;

SELECT * 
FROM user
WHERE user_email = :userEmail;
AND auth_number = :authNumber;

findgByUserEmailAndAuthNumber

-------------------------------------------

// userId / userRole의 요청

client가 header에 bearer 토큰을 포함하여 요청

0. 해당 요청의 메서드와 URL을 보고 인증 인가가 필요한 요청인지 확인
1. header의 Authorization 필드에 값이 있는지 확인
2. 해당 요청의 인증 방식이 Bearer 인증 방식인지 확인 
3. Authorization 필드에 값에서 토큰 추출
4. 토큰의 유효성 판단 
5. 토큰에서 userId 추출
6. userId로 데이터베이스에서 조회
7. 조회 결과로부터 사용자의 권한을 추출
8. context에 request의 정보와 접근주체의 정보를 추가 
9. 접근주체가 해당 요청을 사용할 권한이 있는지 확인 
01 만약 인증 및 인가 작업에 실패하면 'AF' 응답 처리

// controller 들어옴
10. 컨트롤러의 메서드에서 인증 접근 주체의 정보를 가져옴 

(userId)

11. 데이터베이스의 user테이블에서 userId에 해당하는 레코드를 조회
11 - 1. 데이터베이스 오류 발생시 'DBE' 응답 처리 

userEntity = userRepository.findByUserId(userId);
12. 존재하는 user인지 확인 
12-1. 존재하지 않으면 'AF' 응답 처리
String userRole = userEntity.getUserRole();

13. 'SU' 응답 처리 (userId, userRole 포함)

---------------------------------------------------

// board 

0. 클라이언트로부터 Authorization 헤더와 Request Body를 포함하여 요청

0.1 권한이 없는 사용자이면 'AF' 응답 처리 (403)
0.2 유효하지 않은 데이터이면 'VF' 응답 처리 

(title, contents), userId

1. 데이터베이스의 user 테이블에서 해당 유저가 존재하는지 확인 
1.1 존재하지 않은 유저라면 'AF' 응답 처리 (401)
1.2 데이터베이스 오류가 발생하면 'DBE' 응답 처리 

2. Board 테이블에 데이터 삽입 
2.1 데이터베이스 오류가 발생하면 'DBE' 응답 처리 

3. 'SU' 응답 처리 

// BoardController
http://localhost:4000/api/v1/auth/sign-in
// user
eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzZXJ2aWNlMTIzNDUiLCJpYXQiOjE3MTQ2MTYxMDAsImV4cCI6MTcxNDY1MjEwMH0.Tu1qj40nfH4GORnpimjGthh9h-ZvK4tK4GYlkRtvD1k
{
    "userId" : "service12345",
    "userPassword" : "qwer1234"
    
}

Authorization에서 token 값을 입력후 
post http://localhost:4000/api/v1/board/
{
    "title" : "asd(아무거나)",
    "contents" : "asd(아무거나)"
    
}

1. 인증 없이 -> "AF"
2. 유효하지 않은 데이터 -> "VF"
3. "SU"


http://localhost:4000/api/v1/auth/sign-in
// admin
eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTcxNDYxNjk3MywiZXhwIjoxNzE0NjUyOTczfQ.TUcro_oTpdOJNbgIKg3s0ahiplXtfT86AKxYapAJzSk
{
    "userId" : "admin",
    "userPassword" : "qwer1234"
    
}

post http://localhost:4000/api/v1/board/
{
    "title" : "테스트2",
    "contents" : "테스트2"
    
}

// front - views - qna 
http://localhost:3000/service/qna/wirte

------------------------------------------------
back - boardList
데이터베이스에서 전체 리스트 조회 -> List<BoardEntity> -> List<BoardListItem>
//  List<BoardEntity> => 반복하여 List<BoardListItem>에다가 집어넣는 작업을 함

// 전체 조회
SELECT * 
FROM board
ORDER BY reception_number DESC;
-> 쿼리 메서드로 만듦

findByOrderByReceptionNumberDesc();

------------- BoardController
GET http://localhost:4000/api/v1/board/list

---------------GetSearchBoardResponseDto

SELECT *
FROM board
WHERE title LIKE '%searchWord%'
ORDER BY reception_number DESC;

findByTitleContainsOrderByReceptionNumberDesc();

----- BoardController
GET http://localhost:4000/api/v1/board/list/테스트
GET http://localhost:4000/api/v1/board/list/클라이언트

결과 전체 게시물 리스트

총 게시물 수 : 316
총 페이지 수 : 32((총게시물수 - 1) // 한페이지당게시물수) + 1
총 섹션 수 : 4((총페이지수 - 1) // 한섹션당페이지수) + 1

한 페이지 당 10개
한 섹션 당 10페이지

페이지 - 시작인덱스 ~ 종료인덱스
1 - 0 ~ 9(페이지 - 1) * 10 ~ [페이지 * 10 - 1 / 마지막 인덱스]
2 - 10 ~ 19
3 - 20 ~ 29
...
31 - 300 ~ 309
32 - 310 ~ 315

섹션 - 시작페이지 ~ 종료페이지
1 - 1 ~ 10(섹션 * 섹션당페이지수 - (섹션당페이지수 - 1)) ~ [섹션 * 10 / 마지막 페이지]
2 - 11 ~ 20
3 - 21 ~ 30
4 - 31 ~ 32

---------------------------------------------------------------
BoardServiceImplementation

- 유효성 검사

(receptionNumber)

- 데이터베이스의 board 테이블에서 receptionNumber에 해당하는 레코드 조회 
SELECT * 
FROM board
WHERE reception_number = :receptionNumber;

------------------ BoardController
GET http://localhost:4000/api/v1/board/1 (게시물 수)
- 사이트에 들어가서 토큰 받아오기 

= AF, NB 확인
= 정상적으로 반환 확인 

PATCH http://localhost:4000/api/v1/board/1 (게시물 수)/increase-view-count

= AF, NB 확인
= 정상적으로 반환 확인 

su 성공 후 

확인 해보면
GET http://localhost:4000/api/v1/board/1
= 조회수 증가

----------------PostCommentRequestDto
-- BoardController
POST http://localhost:4000/api/v1/board/10/comment

- USER / ADMIN 
= USER -> AF
토큰 : eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzZXJ2aWNlMTIzNDUiLCJpYXQiOjE3MTUwNjc4MzUsImV4cCI6MTcxNTEwMzgzNX0.EdbefWhKwrBU6jV4yY5BKdCL7LfhRvjYgF7wK5nMU58

= request body 잘못 -> VF
admin 토큰 : eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTcxNTA2ODA2MywiZXhwIjoxNzE1MTA0MDYzfQ.aTWyWIbwJJStGUdC5G9JzjwEOidS4YrG2O1vEe2vqZw

= 존재하지 않는 게시물 번호 -> NB
admin 토큰 인 상태
{
    "comment":"답글이에요"
}

= SU
board 번호를 있는 번호로 바꾸면 나옴
POST http://localhost:4000/api/v1/board/7/comment

= 이미 작성된 답글 -> WC 
SU 상태 후 한번더 send를 보내면 뜸 

